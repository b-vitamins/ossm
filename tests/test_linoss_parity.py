from __future__ import annotations

from typing import Callable

import pytest
import torch
from unittest import mock

from ossm.models._linoss_scan import is_available as linoss_extension_available
from ossm.models.linoss import LinOSSLayer, _LinossScanFn


def _naive_scan(a_matrix: torch.Tensor, b_seq: torch.Tensor) -> torch.Tensor:
    """Reference implementation of the associative LinOSS scan using PyTorch ops."""

    length, batch, ssm, _ = b_seq.shape
    state = b_seq.new_zeros((batch, ssm, 2))
    outputs = []
    for t in range(length):
        state = torch.einsum("sij,bsj->bsi", a_matrix, state) + b_seq[t]
        outputs.append(state)
    return torch.stack(outputs, dim=0)


def _random_inputs(
    *,
    length: int,
    batch: int,
    ssm: int,
    device: torch.device,
) -> tuple[torch.Tensor, torch.Tensor]:
    torch.manual_seed(0)
    a_matrix = torch.randn(ssm, 2, 2, dtype=torch.complex64, device=device)
    b_seq = torch.randn(length, batch, ssm, 2, dtype=torch.complex64, device=device)
    return a_matrix, b_seq


@pytest.mark.parametrize("length,batch,ssm", [(4, 2, 3), (8, 1, 5)])
def test_linoss_scan_matches_naive(length: int, batch: int, ssm: int) -> None:
    device = torch.device("cpu")
    a_matrix, b_seq = _random_inputs(length=length, batch=batch, ssm=ssm, device=device)
    a_matrix.requires_grad_(True)
    b_seq.requires_grad_(True)

    out_custom = _LinossScanFn.apply(a_matrix, b_seq)
    out_naive = _naive_scan(a_matrix, b_seq)
    torch.testing.assert_close(out_custom, out_naive, atol=1e-6, rtol=1e-6)

    grad_fn: Callable[[torch.Tensor], torch.Tensor] = lambda out: out.real.sum() + out.imag.sum()
    grad_custom = torch.autograd.grad(grad_fn(out_custom), (a_matrix, b_seq))
    grad_naive = torch.autograd.grad(grad_fn(out_naive), (a_matrix, b_seq))
    for lhs, rhs in zip(grad_custom, grad_naive):
        torch.testing.assert_close(lhs, rhs, atol=5e-5, rtol=5e-5)


def test_linoss_extension_matches_python() -> None:
    if not linoss_extension_available():
        pytest.skip("compiled LinOSS extension is unavailable")

    device = torch.device("cpu")
    a_matrix, b_seq = _random_inputs(length=6, batch=2, ssm=4, device=device)

    a_matrix.requires_grad_(True)
    b_seq.requires_grad_(True)

    out_ext = _LinossScanFn.apply(a_matrix, b_seq)

    with mock.patch("ossm.models._linoss_scan.try_run_scan", return_value=None):
        out_fallback = _LinossScanFn.apply(a_matrix, b_seq)

    torch.testing.assert_close(out_ext, out_fallback, atol=1e-6, rtol=1e-6)


REFERENCE_LINOSS = {
    "A_diag": torch.tensor([0.8822692632675171, 0.9150039553642273, 0.38286375999450684, 0.9593056440353394]),
    "B": torch.tensor(
        [
            [
                [0.3598884046077728, -0.2995024621486664],
                [0.35484787821769714, 0.07640746980905533],
                [0.30161747336387634, 0.05528930202126503],
                [0.19685247540473938, -0.05764098837971687],
                [0.3147128224372864, 0.060342736542224884],
                [-0.19058659672737122, 0.1040618047118187],
            ],
            [
                [-0.18809494376182556, -0.04787644371390343],
                [-0.16581344604492188, 0.27082008123397827],
                [-0.3222590386867523, -0.18820668756961823],
                [-0.11527901142835617, -0.24546846747398376],
                [0.038531750440597534, -0.4032183289527893],
                [0.3686927556991577, -0.3467939794063568],
            ],
            [
                [0.31517887115478516, 0.06794033199548721],
                [-0.13256007432937622, 0.2522770166397095],
                [0.06362581253051758, 0.3298496901988983],
                [0.04462957754731178, -0.12875056266784668],
                [0.10968965291976929, -0.11070854216814041],
                [0.17181438207626343, 0.36449313163757324],
            ],
            [
                [0.23599183559417725, -0.17847494781017303],
                [0.23566731810569763, 0.07304632663726807],
                [0.20732279121875763, -0.2488294094800949],
                [-0.40412846207618713, -0.15773102641105652],
                [-0.3131357729434967, 0.33498361706733704],
                [0.11758830398321152, 0.16910196840763092],
            ],
        ]
    ),
    "C": torch.tensor(
        [
            [0.15813058614730835, -0.008697986602783203],
            [0.3913041353225708, -0.3552567958831787],
            [0.03148186206817627, -0.3412700891494751],
            [0.1541759967803955, -0.17219114303588867],
            [0.15320813655853271, -0.10417073965072632],
            [0.4146959185600281, -0.29635095596313477],
            [-0.29819899797439575, -0.2982169985771179],
            [0.44972139596939087, 0.16662555932998657],
            [0.4811253547668457, -0.4126381278038025],
            [-0.4959380626678467, -0.3911818861961365],
            [-0.33634454011917114, 0.20252007246017456],
            [0.1790379285812378, 0.4154621958732605],
            [-0.258212685585022, -0.3408558964729309],
            [0.2652890682220459, -0.20210224390029907],
            [0.3034619092941284, -0.11865031719207764],
            [0.28602296113967896, -0.38848400115966797],
            [-0.2523248791694641, 0.152438223361969],
            [0.10570377111434937, -0.12747937440872192],
            [0.2980347275733948, 0.3399046063423157],
            [-0.3625866770744324, -0.2669340968132019],
            [0.4578309655189514, -0.16871625185012817],
            [-0.1772581934928894, -0.4837973117828369],
            [-0.2863351106643677, 0.12490183115005493],
            [-0.06599658727645874, -0.36294299364089966],
        ]
    ),
    "D": torch.tensor([1.1351022720336914, 0.7592452168464661, -3.594468832015991, 0.019150810316205025, 0.1051730141043663, 0.960340142250061]),
    "steps": torch.tensor([0.3904482126235962, 0.600895345211029, 0.2565724849700928, 0.7936413288116455]),
    "inputs": torch.tensor(
        [
            [
                [0.3373701870441437, -0.1777772158384323, -0.3035275936126709, -0.5880118608474731, 0.3486051857471466, 0.6603409647941589],
                [-0.21963761746883392, -0.3791698217391968, 0.7671070694923401, -1.1925020217895508, 0.6983519196510315, -1.409722924232483],
                [0.17937961220741272, 1.8951480388641357, 0.4954463839530945, 0.26919856667518616, -0.07702023535966873, -1.0204719305038452],
                [-0.16895627975463867, 0.9177646040916443, 1.5809695720672607, 1.3010399341583252, 1.275301218032837, -0.20095309615135193],
                [0.49647098779678345, -1.5723042488098145, 0.966571569442749, -1.148144006729126, -1.1588678359985352, 0.32547101378440857],
                [-0.6315053701400757, -2.839993953704834, -1.3249573707580566, 0.17842844128608704, -2.1337530612945557, 1.052357792854309],
                [-0.38848307728767395, -0.9343459010124207, -0.4991441071033478, -1.0866526365280151, 0.8805443048477173, 1.5541585683822632],
                [0.6266160607337952, -0.1754872053861618, 0.09828377515077591, -0.09350743144750595, 0.2662147283554077, -0.585035502910614],
            ],
            [
                [0.8768370151519775, 1.6221439838409424, -1.4779419898986816, 1.1331069469451904, -1.2202903032302856, 1.3138538599014282],
                [1.0532996654510498, 0.13880518078804016, 2.247331380844116, -0.8036359548568726, -0.28084245324134827, 0.7696762681007385],
                [-0.6595596075057983, -0.7979276776313782, 0.18383125960826874, 0.22934740781784058, 0.5146290063858032, 0.99376380443573],
                [-0.2587334215641022, -1.0825512409210205, -0.04438198357820511, 1.623557448387146, -2.322870969772339, 1.0878305435180664],
                [0.6715549826622009, 0.6932953000068665, -0.9487248659133911, -0.07650723308324814, -0.15264037251472473, 0.11674118787050247],
                [0.4402604401111603, -1.4465465545654297, 0.2552923560142517, -0.5496276617050171, 1.0042260885238647, 0.8272308707237244],
                [-0.3948087692260742, 0.4892277717590332, -0.21681489050388336, -1.7471644878387451, -1.6025080680847168, -1.076385259628296],
                [0.9031482338905334, -0.7218443155288696, -0.5950842499732971, -0.7112175226211548, 0.6229648590087891, -1.3728818893432617],
            ],
        ]
    ),
    "outputs": torch.tensor(
        [
            [
                [0.4412510395050049, -0.11203021556138992, 0.9183428883552551, 0.09986463189125061, 0.06341627985239029, 0.5683097839355469],
                [-0.20476575195789337, -0.2767668068408966, -2.8300399780273438, 0.08948317915201187, 0.08731149137020111, -1.3368643522262573],
                [0.26540207862854004, 1.5478943586349487, -1.3178889751434326, -0.0392928421497345, -0.19891726970672607, -0.6384593248367311],
                [-0.24226121604442596, 0.709433913230896, -4.751298427581787, -0.3682825267314911, -0.3097900152206421, 0.3973057270050049],
                [0.49054643511772156, -1.0967085361480713, -2.4829506874084473, -0.49337711930274963, -0.7585411071777344, 0.722287654876709],
                [-0.799430787563324, -2.039656162261963, 5.028484344482422, -0.21915218234062195, -0.5628888010978699, 0.7894442081451416],
                [-0.41364601254463196, -0.6303939819335938, 0.9277283549308777, 0.284972608089447, 0.20746678113937378, 0.6699801087379456],
                [0.7729184031486511, -0.15777257084846497, -1.7639567852020264, 0.5562294721603394, 0.4427472949028015, -1.6103339195251465],
            ],
            [
                [1.1446083784103394, 1.392879843711853, 5.280588626861572, 0.1069517582654953, -0.17347528040409088, 1.2636692523956299],
                [1.5027287006378174, 0.5410609245300293, -7.985743045806885, 0.11687061190605164, -0.4570704698562622, 0.6109974980354309],
                [-0.38725435733795166, -0.17822152376174927, -0.8662313222885132, 0.22778268158435822, -0.46919775009155273, 0.5792682766914368],
                [0.027025550603866577, -0.4666774868965149, -0.4133327305316925, 0.2840551435947418, -0.7141047716140747, 0.25646114349365234],
                [1.1284971237182617, 0.8286515474319458, 2.6334190368652344, 0.32637152075767517, -0.3456304967403412, -0.7573888897895813],
                [0.8339102268218994, -1.017909288406372, -2.065514087677002, 0.4133949279785156, 0.019620709121227264, -0.1722937822341919],
                [0.0013436079025268555, 0.6083764433860779, -0.12475800514221191, 0.564797043800354, -0.1817035973072052, -1.7248135805130005],
                [1.4067347049713135, -0.3676029145717621, 1.654320478439331, 0.5103452205657959, 0.20850200951099396, -1.5960605144500732],
            ],
        ]
    ),
}


def test_linoss_layer_matches_reference_snapshot() -> None:
    ref = REFERENCE_LINOSS
    layer = LinOSSLayer(4, 6, "IM").eval()
    with torch.no_grad():
        layer.A_diag.copy_(ref["A_diag"])
        layer.B.copy_(ref["B"])
        layer.C.copy_(ref["C"].view(6, 4, 2))
        layer.D.copy_(ref["D"])
        layer.steps.copy_(ref["steps"])

    out = layer(ref["inputs"].clone())
    torch.testing.assert_close(out, ref["outputs"], atol=5e-6, rtol=5e-6)


@pytest.mark.skipif(not torch.cuda.is_available(), reason="CUDA is unavailable")
def test_linoss_cuda_matches_cpu() -> None:
    if not linoss_extension_available():
        pytest.skip("compiled LinOSS extension is unavailable")

    torch.manual_seed(0)
    length, batch, ssm = 7, 3, 5
    a_matrix = torch.randn(ssm, 2, 2, dtype=torch.complex64, device="cuda")
    b_seq = torch.randn(length, batch, ssm, 2, dtype=torch.complex64, device="cuda")

    out_cuda = _LinossScanFn.apply(a_matrix, b_seq).cpu()
    expected = _naive_scan(a_matrix.cpu(), b_seq.cpu())
    torch.testing.assert_close(out_cuda, expected, atol=5e-6, rtol=5e-6)
