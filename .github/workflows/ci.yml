name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install poetry-core
          python -m pip install torch==2.8.0 --index-url https://download.pytorch.org/whl/cpu
          python -m pip install --no-build-isolation -e .[uea,signature]
          python -m pip install ruff pyright pytest

      - name: Ruff lint
        run: ruff check .

      - name: Pyright type check
        run: pyright

      - name: Run tests
        run: pytest

  build-core-wheel:
    name: Build core wheel
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build wheel and sdist
        run: python -m build

      - name: Upload OSSM distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ossm-core-dist
          path: dist/*

  build-kernels:
    name: Build kernels (${{ matrix.flavor }})
    needs: lint-and-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: cpu
            container: mcr.microsoft.com/devcontainers/python:3.11
            torch_index_url: https://download.pytorch.org/whl/cpu
            build_suffix: cpu
            cuda_home: ""
            arch_list: ""
          - flavor: cu126
            container: pytorch/pytorch:2.8.0-cuda12.6-cudnn9-devel
            torch_index_url: https://download.pytorch.org/whl/cu126
            build_suffix: cu126
            cuda_home: /usr/local/cuda
            arch_list: "8.0;8.6;8.9;9.0"
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure build metadata
        run: echo "OSSM_BUILD_SUFFIX=${{ matrix.build_suffix }}" >> "$GITHUB_ENV"

      - name: Configure CUDA toolchain
        if: ${{ matrix.cuda_home != '' }}
        run: |
          echo "CUDA_HOME=${{ matrix.cuda_home }}" >> "$GITHUB_ENV"
          echo "TORCH_CUDA_ARCH_LIST=${{ matrix.arch_list }}" >> "$GITHUB_ENV"

      - name: Bootstrap build environment
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build wheel ninja

      - name: Install PyTorch wheel
        run: python -m pip install --upgrade torch==2.8.0 --index-url ${{ matrix.torch_index_url }}

      - name: Ensure PyTorch is available
        run: |
          python -c "import importlib.util; import sys; spec = importlib.util.find_spec('torch'); sys.exit('PyTorch is required to build the ossm kernels extension' if spec is None else 0)"

      - name: Build kernels wheel
        run: |
          rm -rf build dist
          python setup.py clean || true
          python setup.py bdist_wheel

      - name: Upload kernels wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: ossm-kernels-${{ matrix.flavor }}
          path: dist/*.whl

  benchmark-models:
    name: Benchmark ${{ matrix.name }} kernels
    needs: lint-and-test
    runs-on: ubuntu-latest
    env:
      JAX_PLATFORMS: cpu
      JAX_PLUGINS_DISABLED: cuda
      CUDA_VISIBLE_DEVICES: "-1"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: D-LinOSS
            script: scripts/benchmark_dlinoss.py
            reference_setup: "true"
          - name: Selective D-LinOSS
            script: scripts/benchmark_sdlinoss.py
            reference_setup: "true"
          - name: LinOSS
            script: scripts/benchmark_linoss.py
            reference_setup: |
              rm -rf /tmp/linoss
              git clone https://github.com/tk-rusch/linoss.git /tmp/linoss
              git -C /tmp/linoss checkout 83e6318469cf9e5f78290ed5f5fe8db7cfb6e667
              echo "LINOSS_REPO=/tmp/linoss" >> "$GITHUB_ENV"
          - name: LRU
            script: scripts/benchmark_lru.py
            reference_setup: |
              rm -rf /tmp/linoss
              git clone https://github.com/tk-rusch/linoss.git /tmp/linoss
              git -C /tmp/linoss checkout 83e6318469cf9e5f78290ed5f5fe8db7cfb6e667
              echo "LINOSS_REPO=/tmp/linoss" >> "$GITHUB_ENV"
          - name: S5
            script: scripts/benchmark_s5.py
            reference_setup: |
              rm -rf /tmp/linoss
              git clone https://github.com/tk-rusch/linoss.git /tmp/linoss
              git -C /tmp/linoss checkout 83e6318469cf9e5f78290ed5f5fe8db7cfb6e667
              echo "LINOSS_REPO=/tmp/linoss" >> "$GITHUB_ENV"
          - name: Linear RNN
            script: scripts/benchmark_rnn.py
            reference_setup: |
              rm -rf /tmp/linoss
              git clone https://github.com/tk-rusch/linoss.git /tmp/linoss
              git -C /tmp/linoss checkout 83e6318469cf9e5f78290ed5f5fe8db7cfb6e667
              echo "LINOSS_REPO=/tmp/linoss" >> "$GITHUB_ENV"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install benchmark dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install poetry-core
          python -m pip install torch==2.8.0 --index-url https://download.pytorch.org/whl/cpu
          python -m pip install --no-build-isolation -e .[linoss,linoss-ref]

      - name: Prepare reference implementation
        run: ${{ matrix.reference_setup }}

      - name: Run benchmark
        run: PYTHONPATH=src python ${{ matrix.script }}
