"""OSSM package public exports."""

from __future__ import annotations

import os
import shutil

if os.environ.get("TORCHINDUCTOR_USE_OPENSSL") is None and shutil.which("openssl") is None:
    os.environ["TORCHINDUCTOR_USE_OPENSSL"] = "0"

from . import data, metrics
from .models import (
    AbstractRNNCell,
    Backbone,
    BatchOnDevice,
    ClassificationHead,
    DampedLinOSSBackbone,
    DampedLinOSSBlock,
    DampedLinOSSLayer,
    Dlinoss4Rec,
    GRURNNCell,
    Head,
    ItemEmbeddingEncoder,
    LRUBackbone,
    LRUBlock,
    LRULayer,
    LSTMRNNCell,
    LinOSSBackbone,
    LinOSSBlock,
    LinOSSLayer,
    LinearRNNCell,
    Mamba4Rec,
    MambaLayer,
    MLPRNNCell,
    NCDEBackbone,
    NCDELayer,
    NCDEVectorField,
    NRDELayer,
    RegressionHead,
    ResidualSSMBlock,
    RNNBackbone,
    RNNLayer,
    S5Backbone,
    S5Block,
    S5Layer,
    SequenceBackboneOutput,
    SelectiveDLinOSSBackbone,
    SelectiveDLinOSSBlock,
    SelectiveDLinOSSLayer,
    TiedSoftmaxHead,
    run_sdlinoss,
)
__all__: tuple[str, ...] = (
    "data",
    "metrics",
    "AbstractRNNCell",
    "Backbone",
    "BatchOnDevice",
    "ClassificationHead",
    "DampedLinOSSBackbone",
    "DampedLinOSSBlock",
    "DampedLinOSSLayer",
    "Dlinoss4Rec",
    "GRURNNCell",
    "Head",
    "ItemEmbeddingEncoder",
    "LinOSSBackbone",
    "LinOSSBlock",
    "LinOSSLayer",
    "LinearRNNCell",
    "LRUBackbone",
    "LRUBlock",
    "LRULayer",
    "LSTMRNNCell",
    "Mamba4Rec",
    "MambaLayer",
    "MLPRNNCell",
    "NCDEBackbone",
    "NCDELayer",
    "NCDEVectorField",
    "NRDELayer",
    "RegressionHead",
    "ResidualSSMBlock",
    "RNNBackbone",
    "RNNLayer",
    "S5Backbone",
    "S5Block",
    "S5Layer",
    "SequenceBackboneOutput",
    "SelectiveDLinOSSBackbone",
    "SelectiveDLinOSSBlock",
    "SelectiveDLinOSSLayer",
    "TiedSoftmaxHead",
    "run_sdlinoss",
)
